// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_importer

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/interactives"
	"github.com/ONSdigital/dp-interactives-importer/importer"
	"sync"
)

// Ensure, that InteractivesAPIClientMock does implement importer.InteractivesAPIClient.
// If this is not the case, regenerate this file with moq.
var _ importer.InteractivesAPIClient = &InteractivesAPIClientMock{}

// InteractivesAPIClientMock is a mock implementation of importer.InteractivesAPIClient.
//
// 	func TestSomethingThatUsesInteractivesAPIClient(t *testing.T) {
//
// 		// make and configure a mocked importer.InteractivesAPIClient
// 		mockedInteractivesAPIClient := &InteractivesAPIClientMock{
// 			PutInteractiveFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, interactiveID string, update interactives.InteractiveUpdate) error {
// 				panic("mock out the PutInteractive method")
// 			},
// 		}
//
// 		// use mockedInteractivesAPIClient in code that requires importer.InteractivesAPIClient
// 		// and then make assertions.
//
// 	}
type InteractivesAPIClientMock struct {
	// PutInteractiveFunc mocks the PutInteractive method.
	PutInteractiveFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, interactiveID string, update interactives.InteractiveUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// PutInteractive holds details about calls to the PutInteractive method.
		PutInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InteractiveID is the interactiveID argument value.
			InteractiveID string
			// Update is the update argument value.
			Update interactives.InteractiveUpdate
		}
	}
	lockPutInteractive sync.RWMutex
}

// PutInteractive calls PutInteractiveFunc.
func (mock *InteractivesAPIClientMock) PutInteractive(ctx context.Context, userAuthToken string, serviceAuthToken string, interactiveID string, update interactives.InteractiveUpdate) error {
	if mock.PutInteractiveFunc == nil {
		panic("InteractivesAPIClientMock.PutInteractiveFunc: method is nil but InteractivesAPIClient.PutInteractive was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		InteractiveID    string
		Update           interactives.InteractiveUpdate
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		InteractiveID:    interactiveID,
		Update:           update,
	}
	mock.lockPutInteractive.Lock()
	mock.calls.PutInteractive = append(mock.calls.PutInteractive, callInfo)
	mock.lockPutInteractive.Unlock()
	return mock.PutInteractiveFunc(ctx, userAuthToken, serviceAuthToken, interactiveID, update)
}

// PutInteractiveCalls gets all the calls that were made to PutInteractive.
// Check the length with:
//     len(mockedInteractivesAPIClient.PutInteractiveCalls())
func (mock *InteractivesAPIClientMock) PutInteractiveCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	InteractiveID    string
	Update           interactives.InteractiveUpdate
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		InteractiveID    string
		Update           interactives.InteractiveUpdate
	}
	mock.lockPutInteractive.RLock()
	calls = mock.calls.PutInteractive
	mock.lockPutInteractive.RUnlock()
	return calls
}
