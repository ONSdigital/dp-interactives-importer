// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_importer

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/interactives"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-interactives-importer/importer"
	"sync"
)

// Ensure, that InteractivesAPIClientMock does implement importer.InteractivesAPIClient.
// If this is not the case, regenerate this file with moq.
var _ importer.InteractivesAPIClient = &InteractivesAPIClientMock{}

// InteractivesAPIClientMock is a mock implementation of importer.InteractivesAPIClient.
//
// 	func TestSomethingThatUsesInteractivesAPIClient(t *testing.T) {
//
// 		// make and configure a mocked importer.InteractivesAPIClient
// 		mockedInteractivesAPIClient := &InteractivesAPIClientMock{
// 			CheckerFunc: func(ctx context.Context, state *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetInteractiveFunc: func(contextMoqParam context.Context, s1 string, s2 string, s3 string) (interactives.Interactive, error) {
// 				panic("mock out the GetInteractive method")
// 			},
// 			PatchInteractiveFunc: func(contextMoqParam context.Context, s1 string, s2 string, s3 string, patchRequest interactives.PatchRequest) (interactives.Interactive, error) {
// 				panic("mock out the PatchInteractive method")
// 			},
// 		}
//
// 		// use mockedInteractivesAPIClient in code that requires importer.InteractivesAPIClient
// 		// and then make assertions.
//
// 	}
type InteractivesAPIClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *health.CheckState) error

	// GetInteractiveFunc mocks the GetInteractive method.
	GetInteractiveFunc func(contextMoqParam context.Context, s1 string, s2 string, s3 string) (interactives.Interactive, error)

	// PatchInteractiveFunc mocks the PatchInteractive method.
	PatchInteractiveFunc func(contextMoqParam context.Context, s1 string, s2 string, s3 string, patchRequest interactives.PatchRequest) (interactives.Interactive, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *health.CheckState
		}
		// GetInteractive holds details about calls to the GetInteractive method.
		GetInteractive []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
		}
		// PatchInteractive holds details about calls to the PatchInteractive method.
		PatchInteractive []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
			// PatchRequest is the patchRequest argument value.
			PatchRequest interactives.PatchRequest
		}
	}
	lockChecker          sync.RWMutex
	lockGetInteractive   sync.RWMutex
	lockPatchInteractive sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *InteractivesAPIClientMock) Checker(ctx context.Context, state *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("InteractivesAPIClientMock.CheckerFunc: method is nil but InteractivesAPIClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *health.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedInteractivesAPIClient.CheckerCalls())
func (mock *InteractivesAPIClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetInteractive calls GetInteractiveFunc.
func (mock *InteractivesAPIClientMock) GetInteractive(contextMoqParam context.Context, s1 string, s2 string, s3 string) (interactives.Interactive, error) {
	if mock.GetInteractiveFunc == nil {
		panic("InteractivesAPIClientMock.GetInteractiveFunc: method is nil but InteractivesAPIClient.GetInteractive was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
		S3:              s3,
	}
	mock.lockGetInteractive.Lock()
	mock.calls.GetInteractive = append(mock.calls.GetInteractive, callInfo)
	mock.lockGetInteractive.Unlock()
	return mock.GetInteractiveFunc(contextMoqParam, s1, s2, s3)
}

// GetInteractiveCalls gets all the calls that were made to GetInteractive.
// Check the length with:
//     len(mockedInteractivesAPIClient.GetInteractiveCalls())
func (mock *InteractivesAPIClientMock) GetInteractiveCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
	S3              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
	}
	mock.lockGetInteractive.RLock()
	calls = mock.calls.GetInteractive
	mock.lockGetInteractive.RUnlock()
	return calls
}

// PatchInteractive calls PatchInteractiveFunc.
func (mock *InteractivesAPIClientMock) PatchInteractive(contextMoqParam context.Context, s1 string, s2 string, s3 string, patchRequest interactives.PatchRequest) (interactives.Interactive, error) {
	if mock.PatchInteractiveFunc == nil {
		panic("InteractivesAPIClientMock.PatchInteractiveFunc: method is nil but InteractivesAPIClient.PatchInteractive was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
		PatchRequest    interactives.PatchRequest
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
		S3:              s3,
		PatchRequest:    patchRequest,
	}
	mock.lockPatchInteractive.Lock()
	mock.calls.PatchInteractive = append(mock.calls.PatchInteractive, callInfo)
	mock.lockPatchInteractive.Unlock()
	return mock.PatchInteractiveFunc(contextMoqParam, s1, s2, s3, patchRequest)
}

// PatchInteractiveCalls gets all the calls that were made to PatchInteractive.
// Check the length with:
//     len(mockedInteractivesAPIClient.PatchInteractiveCalls())
func (mock *InteractivesAPIClientMock) PatchInteractiveCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
	S3              string
	PatchRequest    interactives.PatchRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		S3              string
		PatchRequest    interactives.PatchRequest
	}
	mock.lockPatchInteractive.RLock()
	calls = mock.calls.PatchInteractive
	mock.lockPatchInteractive.RUnlock()
	return calls
}
