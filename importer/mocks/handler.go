// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_importer

import (
	"context"
	"github.com/ONSdigital/dp-interactives-importer/importer"
	"sync"
)

// Ensure, that HandlerMock does implement importer.Handler.
// If this is not the case, regenerate this file with moq.
var _ importer.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of importer.Handler.
//
// 	func TestSomethingThatUsesHandler(t *testing.T) {
//
// 		// make and configure a mocked importer.Handler
// 		mockedHandler := &HandlerMock{
// 			HandleFunc: func(contextMoqParam context.Context, interactivesUploaded *importer.InteractivesUploaded) error {
// 				panic("mock out the Handle method")
// 			},
// 		}
//
// 		// use mockedHandler in code that requires importer.Handler
// 		// and then make assertions.
//
// 	}
type HandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(contextMoqParam context.Context, interactivesUploaded *importer.InteractivesUploaded) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// InteractivesUploaded is the interactivesUploaded argument value.
			InteractivesUploaded *importer.InteractivesUploaded
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(contextMoqParam context.Context, interactivesUploaded *importer.InteractivesUploaded) error {
	if mock.HandleFunc == nil {
		panic("HandlerMock.HandleFunc: method is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		InteractivesUploaded *importer.InteractivesUploaded
	}{
		ContextMoqParam:      contextMoqParam,
		InteractivesUploaded: interactivesUploaded,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(contextMoqParam, interactivesUploaded)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	ContextMoqParam      context.Context
	InteractivesUploaded *importer.InteractivesUploaded
} {
	var calls []struct {
		ContextMoqParam      context.Context
		InteractivesUploaded *importer.InteractivesUploaded
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
